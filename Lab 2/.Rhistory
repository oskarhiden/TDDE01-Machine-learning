pred = prediction_test[,2]
pred = ifelse(pred>pi[i], 1, 0)
if ( sum(pred==0)==0) {
FPR_tree[i] = 0
table = table(real_data, pred)
TPR_tree[i] = 1
} else if ( sum(pred==1)==0) {
TPR_tree[i] = 0
table = table(real_data, pred)
FPR_tree[i] = 1
} else {
table = table(real_data, pred)
print(table)
TPR_tree[i] = (table[2, 2])/sum(table[2, ])
FPR_tree[i] = (table[1, 2])/sum(table[1, ])
}
#print(pred)
}
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="l")
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1))
TPR_tree
FPR_tree
for( i in 1:n){
pred = prediction_test[,2]
pred = ifelse(pred>pi[i], 1, 0)
if ( sum(pred==0)==0) {
FPR_tree[i] = 1
table = table(real_data, pred)
TPR_tree[i] = 1
} else if ( sum(pred==1)==0) {
TPR_tree[i] = 0
table = table(real_data, pred)
FPR_tree[i] = 1
} else {
table = table(real_data, pred)
print(table)
TPR_tree[i] = (table[2, 2])/sum(table[2, ])
FPR_tree[i] = (table[1, 2])/sum(table[1, ])
}
#print(pred)
}
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1))
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="l")
TPR_tree
FPR_tree
pruned_tree = prune.tree(fit_deviance, best = 4)
summary(pruned_tree)
plot(pruned_tree)
text(pruned_tree, pretty = 0)
str(test)
prediction_test = predict(pruned_tree, newdata = test, type = "vector")
pred = as.vector(prediction_test[,2])
pred
real_data
n = length(pi)
TPR_tree = rep(0,n)
FPR_tree = rep(0,n)
for( i in 1:n){
pred = prediction_test[,2]
pred = ifelse(pred>pi[i], 1, 0)
if ( sum(pred==0)==0) {
FPR_tree[i] = 1
table = table(real_data, pred)
TPR_tree[i] = 1
} else if ( sum(pred==1)==0) {
TPR_tree[i] = 0
table = table(real_data, pred)
FPR_tree[i] = 1
} else {
table = table(real_data, pred)
print(table)
TPR_tree[i] = (table[2, 2])/sum(table[2, ])
FPR_tree[i] = (table[1, 2])/sum(table[1, ])
}
#print(pred)
}
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="l")
TPR_tree
FPR_tree
TPR
n = length(pi)
TPR_tree = rep(0,n)
FPR_tree = rep(0,n)
for( i in 1:n){
pred = prediction_test[,2]
pred = ifelse(pred>pi[i], 1, 0)
if ( sum(pred==0)==0) {
FPR_tree[i] = 1
table = table(real_data, pred)
TPR_tree[i] = 1
} else if ( sum(pred==1)==0) {
TPR_tree[i] = 0
table = table(real_data, pred)
FPR_tree[i] = 0
} else {
table = table(real_data, pred)
print(table)
TPR_tree[i] = (table[2, 2])/sum(table[2, ])
FPR_tree[i] = (table[1, 2])/sum(table[1, ])
}
#print(pred)
}
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="l")
TPR_tree
FPR_tree
pruned_tree = prune.tree(fit_deviance, best = 3)
summary(pruned_tree)
plot(pruned_tree)
text(pruned_tree, pretty = 0)
str(test)
prediction_test = predict(pruned_tree, newdata = test, type = "vector")
pred = as.vector(prediction_test[,2])
pred
real_data
n = length(pi)
TPR_tree = rep(0,n)
FPR_tree = rep(0,n)
for( i in 1:n){
pred = prediction_test[,2]
pred = ifelse(pred>pi[i], 1, 0)
if ( sum(pred==0)==0) {
FPR_tree[i] = 1
table = table(real_data, pred)
TPR_tree[i] = 1
} else if ( sum(pred==1)==0) {
TPR_tree[i] = 0
table = table(real_data, pred)
FPR_tree[i] = 0
} else {
table = table(real_data, pred)
print(table)
TPR_tree[i] = (table[2, 2])/sum(table[2, ])
FPR_tree[i] = (table[1, 2])/sum(table[1, ])
}
#print(pred)
}
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="l")
TPR_tree
FPR_tree
TPR
# tree ROC
pruned_tree = prune.tree(fit_deviance, best = 5)
# tree ROC
pruned_tree = prune.tree(fit_deviance, best = 5)
summary(pruned_tree)
plot(pruned_tree)
text(pruned_tree, pretty = 0)
str(test)
prediction_test = predict(pruned_tree, newdata = test, type = "vector")
pred = as.vector(prediction_test[,2])
pred
prediction_test = predict(pruned_tree, newdata = test, type = "prob")
summary(fit_deviance)
train_score = rep(0,20)
test_score = rep(0,20)
for(i in 2:20) {
pruned_tree = prune.tree(fit_deviance, best = i)
set.seed(12345)
pred = predict(pruned_tree, newdata=valid, type="tree")
train_score[i] = deviance(pruned_tree)
test_score[i] = deviance(pred)
}
plot(2:20, train_score[2:20], type="b", col="red", ylim=c(200,550), ylab="Deviance", xlab="No. of leaves")
points(2:20, test_score[2:20], type="b", col="blue")
summary(fit_deviance)
train_score = rep(0,20)
test_score = rep(0,20)
for(i in 2:20) {
pruned_tree = prune.tree(fit_deviance, best = i)
pred = predict(pruned_tree, newdata=valid, type="tree")
train_score[i] = deviance(pruned_tree)
test_score[i] = deviance(pred)
}
plot(2:20, train_score[2:20], type="b", col="red", ylim=c(200,550), ylab="Deviance", xlab="No. of leaves")
points(2:20, test_score[2:20], type="b", col="blue")
creditscoring = read.csv2("C:/Users/oskar/OneDrive/Universitet/Linköping Universitet/År4/Machine learning/Lab 2/creditscoring.csv")
RNGversion('3.5.1')
n=dim(creditscoring)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.5))
train=creditscoring[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.25))
valid=creditscoring[id2,]
id3=setdiff(id1,id2)
test=creditscoring[id3,]
library(tree)
#or:
library(rpart)
#Training data to fit model
fit_deviance = tree(good_bad~. , split = "deviance", data = train)
fit_gini = tree(good_bad~. , split = "gini", data = train)
plot(fit_deviance)
text(fit_deviance, pretty = 0)
summary(fit_deviance)
plot(fit_gini)
text(fit_gini, pretty = 0)
summary(fit_gini)
#Predict using test data.
predict_deviance = predict(fit_deviance, newdata = test, type = "class")
#table(test[["good_bad"]], predict_deviance)
misclass_deviance = misclass(test[["good_bad"]], predict_deviance)
print(misclass_deviance)
predict_gini = predict(fit_gini, newdata = test, type = "class")
#table(test[["good_bad"]], predict_gini)
misclass_gini = misclass(test[["good_bad"]], predict_gini)
print(misclass_gini)
#------------Step 3---------------
#Deviance is chosen due to lower misclassification rate for test data.
summary(fit_deviance)
train_score = rep(0,20)
test_score = rep(0,20)
for(i in 2:20) {
pruned_tree = prune.tree(fit_deviance, best = i)
pred = predict(pruned_tree, newdata=valid, type="tree")
train_score[i] = deviance(pruned_tree)
test_score[i] = deviance(pred)
}
plot(2:20, train_score[2:20], type="b", col="red", ylim=c(200,550), ylab="Deviance", xlab="No. of leaves")
points(2:20, test_score[2:20], type="b", col="blue")
test_score[1] = 5000
which.min(test_score)
## Min when best=5
test_score[4]
pruned_tree = prune.tree(fit_deviance, best = 4)
summary(pruned_tree)
plot(pruned_tree)
text(pruned_tree, pretty = 0)
plot(2:20, train_score[2:20], type="b", col="red", ylim=c(200,550), ylab="Deviance", xlab="No. of leaves")
points(2:20, test_score[2:20], type="b", col="blue")
pruned_tree = prune.tree(fit_deviance, best = 4)
summary(pruned_tree)
plot(pruned_tree)
text(pruned_tree, pretty = 0)
#Misclass for test
prediction_test = predict(pruned_tree, newdata = test, type = "class")
table(test[["good_bad"]], prediction_test)
misclass(test[["good_bad"]], prediction_test)
length(train)
lenght(test)
length(test)
length(valid)
n
n=dim(creditscoring)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.5))
train=creditscoring[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.25))
valid=creditscoring[id2,]
id3=setdiff(id1,id2)
test=creditscoring[id3,]
length(train)
length(valid)
length(test)
n
id
train=creditscoring[id,]
train
length(train)
length(train$duration)
length(test$duration)
n=dim(creditscoring)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.5))
train=creditscoring[id,]
id1=setdiff(1:n, id)
set.seed(12345)
id2=sample(id1, floor(n*0.25))
valid=creditscoring[id2,]
id3=setdiff(id1,id2)
test=creditscoring[id3,]
fit_deviance = tree(good_bad~. , split = "deviance", data = train)
fit_gini = tree(good_bad~. , split = "gini", data = train)
plot(fit_deviance)
text(fit_deviance, pretty = 0)
summary(fit_deviance)
plot(fit_gini)
text(fit_gini, pretty = 0)
summary(fit_gini)
plot(fit_deviance)
#plot(fit_deviance)
#text(fit_deviance, pretty = 0)
summary(fit_deviance)
#plot(fit_gini)
#text(fit_gini, pretty = 0)
summary(fit_gini)
#Predict using test data.
predict_deviance = predict(fit_deviance, newdata = test, type = "class")
#table(test[["good_bad"]], predict_deviance)
misclass_deviance = misclass(test[["good_bad"]], predict_deviance)
print(misclass_deviance)
#table(test[["good_bad"]], predict_deviance)
deviance(predict_deviance)
#table(test[["good_bad"]], predict_deviance)
deviance(predict_deviance)
#table(test[["good_bad"]], predict_deviance)
deviance(fit_deviance)
#table(test[["good_bad"]], predict_deviance)
misclass_deviance = misclass(test[["good_bad"]], predict_deviance)
print(misclass_deviance)
predict_gini = predict(fit_gini, newdata = test, type = "class")
#table(test[["good_bad"]], predict_gini)
misclass_gini = misclass(test[["good_bad"]], predict_gini)
print(misclass_gini)
#------------Step 3---------------
#Deviance is chosen due to lower misclassification rate for test data.
summary(fit_deviance)
train_score = rep(0,20)
test_score = rep(0,20)
for(i in 2:20) {
pruned_tree = prune.tree(fit_deviance, best = i)
pred = predict(pruned_tree, newdata=valid, type="tree")
train_score[i] = deviance(pruned_tree)
test_score[i] = deviance(pred)
}
plot(2:20, train_score[2:20], type="b", col="red", ylim=c(200,550), ylab="Deviance", xlab="No. of leaves")
points(2:20, test_score[2:20], type="b", col="blue")
test_score[1] = 5000
which.min(test_score)
for(i in 2:20) {
pruned_tree = prune.tree(fit_deviance, best = i)
pred = predict(pruned_tree, newdata=valid, type="tree")
train_score[i] = deviance(pruned_tree)
test_score[i] = deviance(pred)
}
for(i in 2:18) {
pruned_tree = prune.tree(fit_deviance, best = i)
pred = predict(pruned_tree, newdata=valid, type="tree")
train_score[i] = deviance(pruned_tree)
test_score[i] = deviance(pred)
}
for(i in 2:16) {
pruned_tree = prune.tree(fit_deviance, best = i)
pred = predict(pruned_tree, newdata=valid, type="tree")
train_score[i] = deviance(pruned_tree)
test_score[i] = deviance(pred)
}
for(i in 2:15) {
pruned_tree = prune.tree(fit_deviance, best = i)
pred = predict(pruned_tree, newdata=valid, type="tree")
train_score[i] = deviance(pruned_tree)
test_score[i] = deviance(pred)
}
plot(2:20, train_score[2:20], type="b", col="red", ylim=c(200,550), ylab="Deviance", xlab="No. of leaves")
points(2:20, test_score[2:20], type="b", col="blue")
train_score = rep(0,15)
test_score = rep(0,15)
for(i in 2:15) {
pruned_tree = prune.tree(fit_deviance, best = i)
pred = predict(pruned_tree, newdata=valid, type="tree")
train_score[i] = deviance(pruned_tree)
test_score[i] = deviance(pred)
}
plot(2:20, train_score[2:20], type="b", col="red", ylim=c(200,550), ylab="Deviance", xlab="No. of leaves")
points(2:20, test_score[2:20], type="b", col="blue")
plot(2:15, train_score[2:15], type="b", col="red", ylim=c(200,550), ylab="Deviance", xlab="No. of leaves")
points(2:15, test_score[2:15], type="b", col="blue")
## Min when best=5
test_score[4]
pruned_tree = prune.tree(fit_deviance, best = 4)
summary(pruned_tree)
#Misclass for test
prediction_test = predict(pruned_tree, newdata = test, type = "class")
table(test[["good_bad"]], prediction_test)
misclass(test[["good_bad"]], prediction_test)
library(MASS)
library(e1071)
fit_naive_bayes =naiveBayes(good_bad~., data=train)
summary(fit_naive_bayes)
#train data
predict_naive_bayes_train = predict(fit_naive_bayes, newdata = train)
table(train[["good_bad"]], predict_naive_bayes_train)
misclass(train[["good_bad"]], predict_naive_bayes_train)
#test data
predict_naive_bayes_test = predict(fit_naive_bayes, newdata = test)
misclass(test[["good_bad"]], predict_naive_bayes_test)
table = table(test[["good_bad"]], predict_naive_bayes_test)
print(table)
table(test[["good_bad"]], predict_naive_bayes_test)
misclass(test[["good_bad"]], predict_naive_bayes_test)
#----------Step 5-----------
# TPR = true positive rate(y-axis)
# FPR = false positive reate(x-axis)
predict_naive_bayes_test = predict(fit_naive_bayes, newdata = test, type= "raw")
predict_naive_bayes_test
?lda
#-------step3-------
lda_pred_wprior = lda(sex~CL + RW, data=australian_crabs, prior = c(0.1, 0.9))
print(lda_pred_wprior)
#Misclass for test
prediction_test = predict(pruned_tree, newdata = test, type = "class")
table(test[["good_bad"]], prediction_test)
misclass(test[["good_bad"]], prediction_test)
library(MASS)
library(e1071)
fit_naive_bayes =naiveBayes(good_bad~., data=train)
summary(fit_naive_bayes)
#train data
predict_naive_bayes_train = predict(fit_naive_bayes, newdata = train)
table(train[["good_bad"]], predict_naive_bayes_train)
misclass(train[["good_bad"]], predict_naive_bayes_train)
#----------Step 5-----------
# TPR = true positive rate(y-axis)
# FPR = false positive reate(x-axis)
predict_naive_bayes_test = predict(fit_naive_bayes, newdata = test, type= "raw")
predict_naive_bayes_test
n = length(pi)
predict = predict_naive_bayes_test[,2]
TPR = rep(0,n)
FPR = rep(0,n)
#observed_data = test[["good_bad"]]
#observed_data[test="good"] = 1
real_data = ifelse(test[["good_bad"]]=="good", 1, 0)
real_data
for( i in 1:n){
predict = predict_naive_bayes_test[,2]
predict = ifelse(predict>pi[i], 1, 0)
table = table(real_data, predict)
print(table)
TPR[i] = (table[2, 2])/sum(table[2, ])
FPR[i] = (table[1, 2])/sum(table[1, ])
}
plot(FPR, TPR, xlim = (0:1), ylim= (0:1))
# tree ROC
#str(test)
prediction_test = predict(pruned_tree, newdata = test, type = "vector")
pred = as.vector(prediction_test[,2])
pred
real_data
n = length(pi)
TPR_tree = rep(0,n)
FPR_tree = rep(0,n)
for( i in 1:n){
pred = prediction_test[,2]
pred = ifelse(pred>pi[i], 1, 0)
if ( sum(pred==0)==0) {
FPR_tree[i] = 1
table = table(real_data, pred)
TPR_tree[i] = 1
} else if ( sum(pred==1)==0) {
TPR_tree[i] = 0
table = table(real_data, pred)
FPR_tree[i] = 0
} else {
table = table(real_data, pred)
print(table)
TPR_tree[i] = (table[2, 2])/sum(table[2, ])
FPR_tree[i] = (table[1, 2])/sum(table[1, ])
}
#print(pred)
}
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="l")
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1))
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="b")
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="b", col="red")
par(new=TRUE)
plot(FPR, TPR, xlim = (0:1), ylim= (0:1), type="b", col="blue")
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="b", col="red", xlap="FPR", ylab="TPR")
par(new=TRUE)
plot(FPR, TPR, xlim = (0:1), ylim= (0:1), type="b", col="blue", xlap="FPR", ylab="TPR")
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="b", col="red", xlab="FPR", ylab="TPR")
par(new=TRUE)
plot(FPR, TPR, xlim = (0:1), ylim= (0:1), type="b", col="blue", xlab="FPR", ylab="TPR")
n = length(pi)
n
# tree ROC
#str(test)
prediction_test = predict(pruned_tree, newdata = test, type = "vector")
pred = (prediction_test[,2])
pred
pred = as.vector(prediction_test[,2])
pred
n = length(pi)
TPR_tree = rep(0,n)
FPR_tree = rep(0,n)
for( i in 1:n){
pred = as.vector(prediction_test[,2])
pred = ifelse(pred>pi[i], 1, 0)
if ( sum(pred==0)==0) {
FPR_tree[i] = 1
table = table(real_data, pred)
TPR_tree[i] = 1
} else if ( sum(pred==1)==0) {
TPR_tree[i] = 0
table = table(real_data, pred)
FPR_tree[i] = 0
} else {
table = table(real_data, pred)
print(table)
TPR_tree[i] = (table[2, 2])/sum(table[2, ])
FPR_tree[i] = (table[1, 2])/sum(table[1, ])
}
#print(pred)
}
plot(FPR_tree, TPR_tree, xlim = (0:1), ylim= (0:1), type="b", col="red", xlab="FPR", ylab="TPR")
par(new=TRUE)
plot(FPR, TPR, xlim = (0:1), ylim= (0:1), type="b", col="blue", xlab="FPR", ylab="TPR")
TPR_tree
FPR_tree
pred = as.vector(prediction_test[,2])
pred
# tree ROC
#str(test)
prediction_test = predict(pruned_tree, newdata = test, type = "vector")
prediction_test
pred = as.vector(prediction_test[,2])
pred
min(pred)
prediction_test
